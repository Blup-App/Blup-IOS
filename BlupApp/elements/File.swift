//
//  Blup_ItemFocus.swift
//  Blup
//
//  Created by Suong Kevin Tan on 07/06/2017.
//  Copyright Â© 2017 HETIC. All rights reserved.
//
//  Generated by PaintCode Plugin for Sketch
//  http://www.paintcodeapp.com/sketch
//

import UIKit



class Wave: NSObject {
    
    
    //MARK: - Canvas Drawings
    
    /// Page 1
    
    class func drawWave(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 667), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 667), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 667)
        
        /// Combined Shape
        let combinedShape = UIBezierPath()
        combinedShape.move(to: CGPoint(x: 375, y: 152.15))
        combinedShape.addCurve(to: CGPoint(x: 123.28, y: 161.55), controlPoint1: CGPoint(x: 275.31, y: 122.57), controlPoint2: CGPoint(x: 225.56, y: 158.4))
        combinedShape.addCurve(to: CGPoint(x: 0, y: 144.57), controlPoint1: CGPoint(x: 52.53, y: 163.73), controlPoint2: CGPoint(x: 16.69, y: 152.79))
        combinedShape.addLine(to: CGPoint.zero)
        combinedShape.addLine(to: CGPoint(x: 375, y: 0))
        combinedShape.addLine(to: CGPoint(x: 375, y: 152.15))
        combinedShape.close()
        combinedShape.move(to: CGPoint(x: 375, y: 152.15))
        context.saveGState()
        combinedShape.usesEvenOddFillRule = true
        UIColor(hue: 0.622, saturation: 0.996, brightness: 1, alpha: 1).setFill()
        combinedShape.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    
    //MARK: - Canvas Images
    
    /// Page 1
    
    class func imageOfIPhone7() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 667), false, 0)
        Wave.drawWave()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    
    //MARK: - Resizing Behavior
    
    enum ResizingBehavior {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.
        
        func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }
            
            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)
            
            switch self {
            case .aspectFit:
                scales.width = min(scales.width, scales.height)
                scales.height = scales.width
            case .aspectFill:
                scales.width = max(scales.width, scales.height)
                scales.height = scales.width
            case .stretch:
                break
            case .center:
                scales.width = 1
                scales.height = 1
            }
            
            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
    
    
}
