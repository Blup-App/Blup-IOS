//
//  DetailsPost.swift
//  Blup
//
//  Created by Suong Kevin Tan on 07/06/2017.
//  Copyright © 2017 HETIC. All rights reserved.
//
//  Generated by PaintCode Plugin for Sketch
//  http://www.paintcodeapp.com/sketch
//

import UIKit



class DetailsPost: NSObject {
    
    
    //MARK: - Canvas Drawings
    
    /// Page 1
    
    class func drawArtboard(tempsRestant: String, dateDebut: String, dateFin: String, title: String, preter: String, emprunter: String, notes: String, cover: UIImage, frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 599), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 599), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 599)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 375, resizedFrame.height / 599)
        
        /// Card BG
        do {
            context.saveGState()
            
            /// Rectangle 2
            let rectangle2 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 375, height: 50), cornerRadius: 5)
            context.saveGState()
            context.saveGState()
            context.beginPath()
            context.addPath(rectangle2.cgPath)
            context.addRect(rectangle2.bounds.insetBy(dx: -15, dy: -17))
            context.clip(using: .evenOdd)
            context.translateBy(x: -391, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 391, y: 2)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 15 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.2).cgColor)
            }
            UIColor.black.setFill()
            rectangle2.fill()
            context.restoreGState()
            UIColor.white.setFill()
            rectangle2.fill()
            context.restoreGState()
            
            /// Rectangle 2
            let rectangle6 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 375, height: 599), cornerRadius: 5)
            context.saveGState()
            UIColor.white.setFill()
            rectangle6.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Notes
        do {
            context.saveGState()
            context.translateBy(x: 19, y: 379)
            
            /// J’ai prêté l’album d
            let jaiPreteLalbumD = NSMutableAttributedString(string: notes)
//            jaiPreteLalbumD.addAttribute(NSFontAttributeName, value: UIFont(name: "Avenir-Book", size: 13)!, range: NSRange(location: 0, length: jaiPreteLalbumD.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 18
                paragraphStyle.minimumLineHeight = 18
                jaiPreteLalbumD.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: jaiPreteLalbumD.length))
            }
            context.saveGState()
            jaiPreteLalbumD.draw(in: CGRect(x: 0, y: 20, width: 336, height: 60))
            context.restoreGState()
            
            /// NOTES
            let nOTES = NSMutableAttributedString(string: "NOTES")
//            nOTES.addAttribute(NSFontAttributeName, value: UIFont(name: "Raleway-Bold", size: 11)!, range: NSRange(location: 0, length: nOTES.length))
            nOTES.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.695, alpha: 1), range: NSRange(location: 0, length: nOTES.length))
            context.saveGState()
            nOTES.draw(at: CGPoint.zero)
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Preteur-Emprunteur
        do {
            context.saveGState()
            context.translateBy(x: -5, y: 282)
            
            /// Rectangle 3
            let rectangle3 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 385, height: 74))
            context.saveGState()
            rectangle3.lineCapStyle = .square
            rectangle3.lineWidth = 0.5
            UIColor(white: 0.874, alpha: 1).setStroke()
            rectangle3.stroke()
            context.restoreGState()
            
            /// Line
            let line = UIBezierPath()
            line.move(to: CGPoint(x: 1.25, y: 0.11))
            line.addLine(to: CGPoint(x: 1.25, y: 73.31))
            context.saveGState()
            context.translateBy(x: 184, y: 0)
            line.lineCapStyle = .square
            line.lineWidth = 0.5
            UIColor(white: 0.874, alpha: 1).setStroke()
            line.stroke()
            context.restoreGState()
            
            /// Group 4
            do {
                context.saveGState()
                context.translateBy(x: 33, y: 11)
                
                /// Prêteur
                let preteur = NSMutableAttributedString(string: "Prêteur")
//                preteur.addAttribute(NSFontAttributeName, value: UIFont(name: "Raleway-Bold", size: 11)!, range: NSRange(location: 0, length: preteur.length))
                preteur.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.622, saturation: 0.996, brightness: 1, alpha: 1), range: NSRange(location: 0, length: preteur.length))
                preteur.addAttribute(NSKernAttributeName, value: 0.55, range: NSRange(location: 0, length: preteur.length))
                context.saveGState()
                preteur.draw(at: CGPoint(x: 65, y: 13))
                context.restoreGState()
                
                /// @Nvyie
                let nvyie = NSMutableAttributedString(string: preter)
//                nvyie.addAttribute(NSFontAttributeName, value: UIFont(name: "Raleway-SemiBold", size: 9)!, range: NSRange(location: 0, length: nvyie.length))
                nvyie.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.094, alpha: 1), range: NSRange(location: 0, length: nvyie.length))
                context.saveGState()
                nvyie.draw(in: CGRect(x: 65, y: 28, width: 49, height: 11))
                context.restoreGState()
                
                /// Avatar
                do {
                    context.saveGState()
                    
                    /// Rectangle 4
                    let rectangle4 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 41.3, height: 41.3), cornerRadius: 3)
                    context.saveGState()
                    context.setAlpha(0.05)
                    context.beginTransparencyLayer(auxiliaryInfo: nil)
                    do {
                        context.translateBy(x: 4.35, y: 4.35)
                        UIColor(hue: 0.622, saturation: 0.996, brightness: 1, alpha: 1).setFill()
                        rectangle4.fill()
                    }
                    context.endTransparencyLayer()
                    context.restoreGState()
                    
                    /// Rectangle 4
                    let rectangle7 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 50, height: 50), cornerRadius: 3)
                    context.saveGState()
                    context.setAlpha(0.05)
                    context.beginTransparencyLayer(auxiliaryInfo: nil)
                    do {
                        UIColor(hue: 0.622, saturation: 0.996, brightness: 1, alpha: 1).setFill()
                        rectangle7.fill()
                    }
                    context.endTransparencyLayer()
                    context.restoreGState()
                    
                    /// 13528650_10210071790170702_5294754915348935673_o
                    do {
                        context.saveGState()
                        context.translateBy(x: 9.78, y: 9.78)
                        
                        /// Mask
                        let mask = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 30.43, height: 30.43), cornerRadius: 3)
                        context.saveGState()
                        UIColor(white: 0.847, alpha: 1).setFill()
                        mask.fill()
                        context.saveGState()
                        mask.lineWidth = 3
                        context.beginPath()
                        context.addPath(mask.cgPath)
                        context.addRect(mask.bounds.insetBy(dx: -30, dy: -30))
                        context.clip(using: .evenOdd)
                        UIColor(hue: 0.622, saturation: 0.996, brightness: 1, alpha: 1).setStroke()
                        mask.stroke()
                        context.restoreGState()
                        context.restoreGState()
                        
                        /// Mask (Outline Mask)
                        context.saveGState()
                        mask.addClip()
                        
                        /// 13528650_10210071790170702_5294754915348935673_o
                        // Warning: Image layers are not supported.
                        
                        context.restoreGState()
                        // End Mask (Outline Mask)
                        
                        context.restoreGState()
                    }
                    
                    context.restoreGState()
                }
                
                context.restoreGState()
            }
            
            /// Group 3
            do {
                context.saveGState()
                context.translateBy(x: 209, y: 12)
                
                /// Emprunteur
                let emprunteur = NSMutableAttributedString(string: "Emprunteur")
//                emprunteur.addAttribute(NSFontAttributeName, value: UIFont(name: "Raleway-Bold", size: 11)!, range: NSRange(location: 0, length: emprunteur.length))
                emprunteur.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.077, saturation: 0.561, brightness: 1, alpha: 1), range: NSRange(location: 0, length: emprunteur.length))
                emprunteur.addAttribute(NSKernAttributeName, value: 0.55, range: NSRange(location: 0, length: emprunteur.length))
                context.saveGState()
                emprunteur.draw(at: CGPoint(x: 64, y: 12))
                context.restoreGState()
                
                /// @Im_SRKhan
                let im_SRKhan = NSMutableAttributedString(string: emprunter)
//                im_SRKhan.addAttribute(NSFontAttributeName, value: UIFont(name: "Raleway-SemiBold", size: 9)!, range: NSRange(location: 0, length: im_SRKhan.length))
                im_SRKhan.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.094, alpha: 1), range: NSRange(location: 0, length: im_SRKhan.length))
                context.saveGState()
                im_SRKhan.draw(in: CGRect(x: 64, y: 27, width: 75, height: 11))
                context.restoreGState()
                
                /// Avatar Copy 2
                do {
                    context.saveGState()
                    
                    /// Rectangle 4
                    let rectangle8 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 41.3, height: 41.3), cornerRadius: 3)
                    context.saveGState()
                    context.setAlpha(0.05)
                    context.beginTransparencyLayer(auxiliaryInfo: nil)
                    do {
                        context.translateBy(x: 4.35, y: 4.35)
                        UIColor(hue: 0.077, saturation: 0.561, brightness: 1, alpha: 1).setFill()
                        rectangle8.fill()
                    }
                    context.endTransparencyLayer()
                    context.restoreGState()
                    
                    /// Rectangle 4
                    let rectangle9 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 50, height: 50), cornerRadius: 3)
                    context.saveGState()
                    context.setAlpha(0.05)
                    context.beginTransparencyLayer(auxiliaryInfo: nil)
                    do {
                        UIColor(hue: 0.077, saturation: 0.561, brightness: 1, alpha: 1).setFill()
                        rectangle9.fill()
                    }
                    context.endTransparencyLayer()
                    context.restoreGState()
                    
                    /// 13528650_10210071790170702_5294754915348935673_o
                    do {
                        context.saveGState()
                        context.translateBy(x: 9.78, y: 9.78)
                        
                        /// Mask
                        let mask2 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 30.43, height: 30.43), cornerRadius: 3)
                        context.saveGState()
                        context.saveGState()
                        mask2.lineWidth = 3
                        context.beginPath()
                        context.addPath(mask2.cgPath)
                        context.addRect(mask2.bounds.insetBy(dx: -30, dy: -30))
                        context.clip(using: .evenOdd)
                        UIColor(hue: 0.077, saturation: 0.561, brightness: 1, alpha: 1).setStroke()
                        mask2.stroke()
                        context.restoreGState()
                        context.restoreGState()
                        
                        /// Mask (Outline Mask)
                        context.saveGState()
                        mask2.addClip()
                        
                        /// Shahrukh_interacts_with_media_after_KKR's_maiden_IPL_title
                        // Warning: Image layers are not supported.
                        
                        context.restoreGState()
                        // End Mask (Outline Mask)
                        
                        context.restoreGState()
                    }
                    
                    context.restoreGState()
                }
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        /// Title Item
        let titleItem = NSMutableAttributedString(string: title)
        titleItem.addAttribute(NSFontAttributeName, value: UIFont(name: "Raleway-Bold", size: 20)!, range: NSRange(location: 0, length: titleItem.length))
        context.saveGState()
        titleItem.draw(at: CGPoint(x: 20, y: 240))
        context.restoreGState()
        /// Time Left Band
        do {
            context.saveGState()
            context.translateBy(x: 10, y: 196)
            
            /// Rectangle
            let rectangle = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 355, height: 27), cornerRadius: 3)
            context.saveGState()
            context.saveGState()
            rectangle.lineWidth = 1
            context.beginPath()
            context.addPath(rectangle.cgPath)
            context.clip(using: .evenOdd)
            UIColor(hue: 0.622, saturation: 0.996, brightness: 1, alpha: 1).setStroke()
            rectangle.stroke()
            context.restoreGState()
            context.restoreGState()
            
            /// Time Left Band
            context.saveGState()
            context.setShadow(
                offset: CGSize(width: 0 * resizedShadowScale, height: 1 * resizedShadowScale),
                blur: 4 * resizedShadowScale,
                color: UIColor(hue: 0.622, saturation: 0.934, brightness: 0.949, alpha: 0.38).cgColor)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                
                /// Combined Shape
                let combinedShape = UIBezierPath()
                combinedShape.move(to: CGPoint(x: 226.5, y: 0))
                combinedShape.addLine(to: CGPoint(x: 3.01, y: 0))
                combinedShape.addCurve(to: CGPoint(x: 0, y: 2.99), controlPoint1: CGPoint(x: 1.34, y: 0), controlPoint2: CGPoint(x: 0, y: 1.34))
                combinedShape.addLine(to: CGPoint(x: 0, y: 24.01))
                combinedShape.addCurve(to: CGPoint(x: 3.01, y: 27), controlPoint1: CGPoint(x: 0, y: 25.66), controlPoint2: CGPoint(x: 1.35, y: 27))
                combinedShape.addLine(to: CGPoint(x: 226.5, y: 27))
                combinedShape.addLine(to: CGPoint(x: 301, y: 27))
                combinedShape.addLine(to: CGPoint(x: 301, y: 0))
                combinedShape.addLine(to: CGPoint(x: 226.5, y: 0))
                combinedShape.close()
                combinedShape.move(to: CGPoint(x: 226.5, y: 0))
                context.saveGState()
                context.setAlpha(0.89)
                context.setBlendMode(.multiply)
                context.beginTransparencyLayer(auxiliaryInfo: nil)
                do {
                    combinedShape.usesEvenOddFillRule = true
                    UIColor(hue: 0.622, saturation: 0.996, brightness: 1, alpha: 1).setFill()
                    combinedShape.fill()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                
                /// RENDRE DANS
                let rENDREDANS = NSMutableAttributedString(string: "RENDRE DANS")
//                rENDREDANS.addAttribute(NSFontAttributeName, value: UIFont(name: "Raleway-SemiBold", size: 10)!, range: NSRange(location: 0, length: rENDREDANS.length))
                rENDREDANS.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: rENDREDANS.length))
                rENDREDANS.addAttribute(NSKernAttributeName, value: 0.5, range: NSRange(location: 0, length: rENDREDANS.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    rENDREDANS.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: rENDREDANS.length))
                }
                context.saveGState()
                rENDREDANS.draw(at: CGPoint(x: 9.5, y: 8))
                context.restoreGState()
                
                /// JOURS
                let jOURS = NSMutableAttributedString(string: "JOURS")
//                jOURS.addAttribute(NSFontAttributeName, value: UIFont(name: "Raleway-SemiBold", size: 10)!, range: NSRange(location: 0, length: jOURS.length))
                jOURS.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: jOURS.length))
                jOURS.addAttribute(NSKernAttributeName, value: 0.5, range: NSRange(location: 0, length: jOURS.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    jOURS.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: jOURS.length))
                }
                context.saveGState()
                jOURS.draw(at: CGPoint(x: 121.5, y: 8))
                context.restoreGState()
                
                /// 13
                let _13 = NSMutableAttributedString(string: tempsRestant)
//                _13.addAttribute(NSFontAttributeName, value: UIFont(name: "SourceSansPro-Semibold", size: 16)!, range: NSRange(location: 0, length: _13.length))
                _13.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: _13.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    _13.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: _13.length))
                }
                context.saveGState()
                _13.draw(at: CGPoint(x: 105, y: 8))
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// Du 10/05 au 09/06
            let du1005Au0906 = NSMutableAttributedString(string: "Du " + dateDebut + " au " + dateFin)
//            du1005Au0906.addAttribute(NSFontAttributeName, value: UIFont(name: "Raleway-SemiBold", size: 10)!, range: NSRange(location: 0, length: 2))
//            du1005Au0906.addAttribute(NSFontAttributeName, value: UIFont(name: "SourceSansPro-Semibold", size: 10)!, range: NSRange(location: 2, length: 1))
//            du1005Au0906.addAttribute(NSFontAttributeName, value: UIFont(name: "SourceSansPro-Semibold", size: 12)!, range: NSRange(location: 3, length: 5))
//            du1005Au0906.addAttribute(NSFontAttributeName, value: UIFont(name: "Raleway-SemiBold", size: 12)!, range: NSRange(location: 8, length: 1))
//            du1005Au0906.addAttribute(NSFontAttributeName, value: UIFont(name: "Raleway-SemiBold", size: 10)!, range: NSRange(location: 9, length: 3))
//            du1005Au0906.addAttribute(NSFontAttributeName, value: UIFont(name: "SourceSansPro-Semibold", size: 12)!, range: NSRange(location: 12, length: 5))
            du1005Au0906.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.622, saturation: 0.996, brightness: 1, alpha: 1), range: NSRange(location: 0, length: du1005Au0906.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .right
                du1005Au0906.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: du1005Au0906.length))
            }
            context.saveGState()
            du1005Au0906.draw(at: CGPoint(x: 252, y: 5))
            context.restoreGState()
            
            /// Du 10/05 au 30/05
            do {
                context.saveGState()
                context.translateBy(x: 6, y: 1)
                
                /// Mask
                let mask3 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 294, height: 27), cornerRadius: 3)
                
                /// Mask (Outline Mask)
                context.saveGState()
                mask3.addClip()
                
                /// Du 10/05 au 09/06
                let du1005Au2 = NSMutableAttributedString(string: "Du " + dateDebut + " au " + dateFin)
//                du1005Au2.addAttribute(NSFontAttributeName, value: UIFont(name: "Raleway-SemiBold", size: 10)!, range: NSRange(location: 0, length: 3))
//                du1005Au2.addAttribute(NSFontAttributeName, value: UIFont(name: "SourceSansPro-Semibold", size: 12)!, range: NSRange(location: 3, length: 5))
//                du1005Au2.addAttribute(NSFontAttributeName, value: UIFont(name: "Raleway-SemiBold", size: 10)!, range: NSRange(location: 8, length: 4))
//                du1005Au2.addAttribute(NSFontAttributeName, value: UIFont(name: "SourceSansPro-Semibold", size: 12)!, range: NSRange(location: 12, length: 5))
                du1005Au2.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: du1005Au2.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .right
                    du1005Au2.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: du1005Au2.length))
                }
                context.saveGState()
                du1005Au2.draw(at: CGPoint(x: 246, y: 4))
                context.restoreGState()
                
                context.restoreGState()
                // End Mask (Outline Mask)
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        /// Image Item
        do {
            context.saveGState()
            context.translateBy(x: 10, y: 11)
            
            /// Image Holder
            do {
                context.saveGState()
                
                /// Mask
                let mask4 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 355, height: 173), cornerRadius: 5)
                context.saveGState()
                UIColor.white.setFill()
                mask4.fill()
                context.restoreGState()
                
                /// Mask (Outline Mask)
                context.saveGState()
                mask4.addClip()
                
                /// on-planets-cure
                context.draw(cover.cgImage!, in: CGRect(x: 0.0,y: 0.0,width: cover.size.width,height: cover.size.height))
                // Warning: Image layers are not supported.
                
                context.restoreGState()
                // End Mask (Outline Mask)
                
                context.restoreGState()
            }
            
            /// Button Rendu
            do {
                context.saveGState()
                context.translateBy(x: 262, y: 138)
                
                /// Rectangle 5
                let rectangle5 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 79, height: 23), cornerRadius: 3)
                context.saveGState()
                UIColor(white: 0, alpha: 0.35).setFill()
                rectangle5.fill()
                context.saveGState()
                rectangle5.lineWidth = 2
                context.beginPath()
                context.addPath(rectangle5.cgPath)
                context.clip(using: .evenOdd)
                UIColor.white.setStroke()
                rectangle5.stroke()
                context.restoreGState()
                context.restoreGState()
                
                /// Rendu
                let rendu = NSMutableAttributedString(string: "Rendu")
//                rendu.addAttribute(NSFontAttributeName, value: UIFont(name: "Raleway-SemiBold", size: 10)!, range: NSRange(location: 0, length: rendu.length))
                rendu.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: rendu.length))
                rendu.addAttribute(NSKernAttributeName, value: 0.5, range: NSRange(location: 0, length: rendu.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .right
                    rendu.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: rendu.length))
                }
                context.saveGState()
                rendu.draw(at: CGPoint(x: 30, y: 6))
                context.restoreGState()
                
                /// checked
                do {
                    context.saveGState()
                    context.translateBy(x: 13, y: 8)
                    
                    /// Shape
                    let shape = UIBezierPath()
                    shape.move(to: CGPoint(x: 0.1, y: 3.47))
                    shape.addCurve(to: CGPoint(x: 0, y: 3.24), controlPoint1: CGPoint(x: 0.03, y: 3.4), controlPoint2: CGPoint(x: 0, y: 3.31))
                    shape.addCurve(to: CGPoint(x: 0.1, y: 3.02), controlPoint1: CGPoint(x: 0, y: 3.18), controlPoint2: CGPoint(x: 0.03, y: 3.09))
                    shape.addLine(to: CGPoint(x: 0.59, y: 2.58))
                    shape.addCurve(to: CGPoint(x: 1.07, y: 2.58), controlPoint1: CGPoint(x: 0.73, y: 2.46), controlPoint2: CGPoint(x: 0.93, y: 2.46))
                    shape.addLine(to: CGPoint(x: 1.11, y: 2.61))
                    shape.addLine(to: CGPoint(x: 3.01, y: 4.47))
                    shape.addCurve(to: CGPoint(x: 3.25, y: 4.47), controlPoint1: CGPoint(x: 3.08, y: 4.54), controlPoint2: CGPoint(x: 3.18, y: 4.54))
                    shape.addLine(to: CGPoint(x: 7.89, y: 0.09))
                    shape.addLine(to: CGPoint(x: 7.93, y: 0.09))
                    shape.addLine(to: CGPoint(x: 7.93, y: 0.09))
                    shape.addCurve(to: CGPoint(x: 8.41, y: 0.09), controlPoint1: CGPoint(x: 8.07, y: -0.03), controlPoint2: CGPoint(x: 8.27, y: -0.03))
                    shape.addLine(to: CGPoint(x: 8.9, y: 0.54))
                    shape.addCurve(to: CGPoint(x: 8.9, y: 0.98), controlPoint1: CGPoint(x: 9.03, y: 0.66), controlPoint2: CGPoint(x: 9.03, y: 0.85))
                    shape.addLine(to: CGPoint(x: 8.9, y: 0.98))
                    shape.addLine(to: CGPoint(x: 3.36, y: 6.21))
                    shape.addCurve(to: CGPoint(x: 3.12, y: 6.3), controlPoint1: CGPoint(x: 3.29, y: 6.27), controlPoint2: CGPoint(x: 3.22, y: 6.3))
                    shape.addCurve(to: CGPoint(x: 2.87, y: 6.21), controlPoint1: CGPoint(x: 3.01, y: 6.3), controlPoint2: CGPoint(x: 2.94, y: 6.27))
                    shape.addLine(to: CGPoint(x: 0.17, y: 3.56))
                    shape.addLine(to: CGPoint(x: 0.1, y: 3.47))
                    shape.addLine(to: CGPoint(x: 0.1, y: 3.47))
                    shape.close()
                    shape.move(to: CGPoint(x: 0.1, y: 3.47))
                    context.saveGState()
                    UIColor.white.setFill()
                    shape.fill()
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    
    //MARK: - Canvas Images
    
    /// Page 1
    
//    class func imageOfArtboard() -> UIImage {
//        struct LocalCache {
//            static var image: UIImage!
//        }
//        if LocalCache.image != nil {
//            return LocalCache.image
//        }
//        var image: UIImage
//        
//        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 599), false, 0)
//        DetailsPost.drawArtboard()
//        image = UIGraphicsGetImageFromCurrentImageContext()!
//        UIGraphicsEndImageContext()
//        
//        LocalCache.image = image
//        return image
//    }
    
    
    //MARK: - Resizing Behavior
    
    enum ResizingBehavior {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.
        
        func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }
            
            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)
            
            switch self {
            case .aspectFit:
                scales.width = min(scales.width, scales.height)
                scales.height = scales.width
            case .aspectFill:
                scales.width = max(scales.width, scales.height)
                scales.height = scales.width
            case .stretch:
                break
            case .center:
                scales.width = 1
                scales.height = 1
            }
            
            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
    
    
}
